<?xml version="1.0" encoding="UTF-8"?>     
<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"    
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance  http://www.springmodules.org/schema/cache/springmodules-cache.xsd http://www.springmodules.org/schema/cache/springmodules-ehcache.xsd"    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee      
    http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd          
     "> 
	<display-name>RDF web v1.0</display-name>
	<description>This Java Web Project Was Created By Xie Xianbin, Using for The Graduation Design of RDF OS.</description>
	
	<!-- ======================== 单点登录开始 ======================== -->
	<!-- 用于单点退出，该过滤器用于实现单点登出功能，可选配置 -->
	<listener>
		<listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>
	</listener>

	<!-- 该过滤器用于实现单点登出功能，可选配置。 -->
	<filter>
		<filter-name>CAS Single Sign Out Filter</filter-name>
		<filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>CAS Single Sign Out Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>CAS Filter</filter-name>
		<filter-class>org.jasig.cas.client.authentication.AuthenticationFilter</filter-class>
		<init-param>
			<description>CAS登录URL</description>
			<param-name>casServerLoginUrl</param-name>
			<param-value>http://cas.166801.com:8580/cas/login</param-value>
		</init-param>
		<init-param>
			<description>本地系统发布路径</description>
			<param-name>serverName</param-name>
			<param-value>http://ac.166801.com:8680</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 该过滤器负责对Ticket的校验工作，必须启用它 -->
	<filter>
		<filter-name>CAS Validation Filter</filter-name>
		<filter-class>
			org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter
		</filter-class>
		<init-param>
			<description>CAS发布路径</description>
			<param-name>casServerUrlPrefix</param-name>
			<param-value>http://cas.166801.com:8580/cas</param-value>
		</init-param>
		<init-param>
			<description>本地系统发布路径</description>
			<param-name>serverName</param-name>
			<param-value>http://ac.166801.com:8680</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CAS Validation Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 该过滤器负责实现HttpServletRequest请求的包裹， 比如允许开发者通过HttpServletRequest的getRemoteUser()方法获得SSO登录用户的登录名，可选配置。 -->
	<filter>
		<filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>
		<filter-class>
			org.jasig.cas.client.util.HttpServletRequestWrapperFilter
		</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 该过滤器使得开发者可以通过org.jasig.cas.client.util.AssertionHolder来获取用户的登录名。 比如AssertionHolder.getAssertion().getPrincipal().getName()。 -->
	<filter>
		<filter-name>CAS Assertion Thread Local Filter</filter-name>
		<filter-class>org.jasig.cas.client.util.AssertionThreadLocalFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>CAS Assertion Thread Local Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- ======================== 单点登录结束 ======================== -->
	
	<!-- 该过滤器将把登录CAS成功后将用户信息和URL存入session -->
	<filter>
		<display-name>将cas信息存入session</display-name>
		<filter-name>CAS info to session</filter-name>
		<init-param>
			<param-name>enCoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<filter-class>com.openrdf.filter.CasInfo2Session</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>CAS info to session</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- Enhance Struts2 configuration ** struts Framework -->
    <filter>  
        <filter-name>struts2</filter-name>  
        <filter-class>  
          org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter  
        </filter-class>  
    </filter>  
    <filter-mapping>  
        <filter-name>struts2</filter-name>  
        <url-pattern>/*</url-pattern>  
    </filter-mapping>
    
    <!-- spring configuration -->
    <!-- Spring Framework -->  
	<listener>  
	    <listener-class>  
	      org.springframework.web.context.ContextLoaderListener  
	    </listener-class>  
	</listener>  
	<context-param>
		<description>load spring configuration file</description>
	    <param-name>contextConfigLocation</param-name>  
	    <param-value>  
	        /WEB-INF/classes/applicationContext*.xml
	    </param-value>  
	</context-param> 
    
	
	<!-- 以下是log4j的配置 -->
	<!--
		- Location of the Log4J configuration file, for initialization and refresh checks. - Applied by Log4jConfigListener.
	-->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/classes/log4j.xml</param-value>
	</context-param>

	<context-param>
		<param-name>log4jExposeWebAppRoot</param-name>
		<param-value>false</param-value>
	</context-param>

	<!--
		Specify that the log4j configuration should be reloaded periodically to pick up changes
	-->
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>60000</param-value>
	</context-param>

	<!--
		- Configures Log4J for this web app. - As this context specifies a
		context-param "log4jConfigLocation", its file path - is used to load
		the Log4J configuration, including periodic refresh checks. - - Would
		fall back to default Log4J initialization (non-refreshing) if no
		special - context-params are given. - - Exports a "web app root key",
		i.e. a system property that specifies the root - directory of this web
		app, for usage in log file paths. - This web app specifies "cas.root"
		(see log4j.properties file).
	-->
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	
	<jsp-config>
		<jsp-property-group>
			<icon>/favicon.ico</icon>
		</jsp-property-group>
	</jsp-config>
	<welcome-file-list>
		<welcome-file>toIndex.jsp</welcome-file>
	</welcome-file-list>
</web-app>
